trigger:
- main

pool:
  vmImage: 'windows-2019'

jobs:
  - job: Pomodoro
    strategy:
      matrix:
        # ubuntu_22_04_debug_gcc_9:
        #   imageName: 'ubuntu-22.04'
        #   generator: Unix Makefiles
        #   build_configuration: 'Debug'
        #   gcc_version: 9
        # ubuntu_22_04_release_gcc_9:
        #   imageName: 'ubuntu-22.04'
        #   generator: Unix Makefiles
        #   build_configuration: 'Release'
        #   gcc_version: 9
        ubuntu_22_04_debug_gcc_10:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          gcc_version: 10
        ubuntu_22_04_release_gcc_10:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          gcc_version: 10
        ubuntu_22_04_debug_gcc_11:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          gcc_version: 11
        ubuntu_22_04_release_gcc_11:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          gcc_version: 11
        # ubuntu_20_04_debug_gcc_9:
        #   imageName: 'ubuntu-20.04'
        #   generator: Unix Makefiles
        #   build_configuration: 'Debug'
        #   gcc_version: 9
        # ubuntu_20_04_release_gcc_9:
        #   imageName: 'ubuntu-20.04'
        #   generator: Unix Makefiles
        #   build_configuration: 'Release'
        #   gcc_version: 9
        ubuntu_20_04_debug_gcc_10:
          imageName: 'ubuntu-20.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          gcc_version: 10
        ubuntu_20_04_release_gcc_10:
          imageName: 'ubuntu-20.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          gcc_version: 10
        # ubuntu_18_04_debug_gcc_9:
        #   imageName: 'ubuntu-18.04'
        #   generator: Unix Makefiles
        #   build_configuration: 'Debug'
        #   gcc_version: 9
        # ubuntu_18_04_release_gcc_9:
        #   imageName: 'ubuntu-18.04'
        #   generator: Unix Makefiles
        #   build_configuration: 'Release'
        #   gcc_version: 9
        ubuntu_18_04_debug_gcc_10:
          imageName: 'ubuntu-18.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          gcc_version: 10
        ubuntu_18_04_release_gcc_10:
          imageName: 'ubuntu-18.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          gcc_version: 10
        mac_10_15_debug:
          imageName: 'macOS-10.15'
          generator: Xcode
          build_configuration: 'Debug'
        mac_10_15_release:
          imageName: 'macOS-10.15'
          generator: Xcode
          build_configuration: 'Release'
        mac_11_debug:
          imageName: 'macOS-11'
          generator: Xcode
          build_configuration: 'Debug'
        mac_11_release:
          imageName: 'macOS-11'
          generator: Xcode
          build_configuration: 'Release'
        mac_12_debug:
          imageName: 'macOS-12'
          generator: Xcode
          build_configuration: 'Debug'
        mac_12_release:
          imageName: 'macOS-12'
          generator: Xcode
          build_configuration: 'Release'
        windows_2019_debug:
          imageName: 'windows-2019'
          generator: Visual Studio 16 2019
          build_configuration: 'Debug'
        windows_2019_release:
          imageName: 'windows-2019'
          generator: Visual Studio 16 2019
          build_configuration: 'Release'
        windows_2022_debug:
          imageName: 'windows-2022'
          generator: Visual Studio 17 2022
          build_configuration: 'Debug'
        windows_2022_release:
          imageName: 'windows-2022'
          generator: Visual Studio 17 2022
          build_configuration: 'Release'
    pool:
        vmImage: $(imageName)
    steps:
    - script: |
        ls /usr/bin/gcc*
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$(gcc_version) 1
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$(gcc_version) 1
      displayName: 'Setup the correct version of gcc'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        pip3 install setuptools
        pip3 install -r requirements.txt
      displayName: 'Installs dependencies'
    - script: |
        cd XYModem
        mkdir -p build
        cd build
        cmake .. -G "$(generator)" -DCMAKE_BUILD_TYPE=$(build_configuration)
      displayName: 'Generates the Solution of the Project'
    - script: |
        cd XYModem/build
        cmake --build . --config $(build_configuration)
      displayName: 'Compiles the solution in $(build_configuration) Configuration'
    - script: |
        cd XYModem/build
        ctest -C $(build_configuration) -T Test --output-on-failure
      displayName: 'Runs the tests in $(build_configuration) configuration'
  - job: Static_Analysis
    strategy:
      matrix:
        debug:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          gcc_version: 11
        release:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          gcc_version: 11
    pool:
        vmImage: $(imageName)
    steps:
    - script: |
        ls /usr/bin/gcc*
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$(gcc_version) 1
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$(gcc_version) 1
      displayName: 'Setup the correct version of gcc'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        sudo apt-get install clang-tidy
        clang-tidy --version
      displayName: 'Installs the latest version of clang-tidy'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        pip3 install setuptools
        pip3 install -r requirements.txt
      displayName: 'Installs dependencies'
    - script: |
        cd XYModem
        mkdir -p build
        cd build
        cmake .. -G "$(generator)" -DCMAKE_BUILD_TYPE=$(build_configuration) -DWITH_STATIC_ANALYSIS=ON
      displayName: 'Generates the Solution of the Project with the static analysis tools set up'
    - script: |
        cd XYModem/build
        cmake --build . --config $(build_configuration)
      displayName: 'Compiles the solution in $(build_configuration) configuration while running the static analysis tools'
