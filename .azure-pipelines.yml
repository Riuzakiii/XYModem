trigger:
    batch: true
    branches:
        include: 
        - master
    tags:
        include:
        - v*


pool:
  vmImage: 'ubuntu-22.04'

jobs:
  - job: XYModem
    strategy:
      matrix:
        ubuntu_22_04_debug_gcc_10:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          compiler_version: 10
          uses_clang_compiler: OFF
          export_artefacts: false
        ubuntu_22_04_release_gcc_10:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          compiler_version: 10
          uses_clang_compiler: OFF
          export_artefacts: false
        ubuntu_22_04_debug_gcc_11:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          compiler_version: 11
          uses_clang_compiler: OFF
        ubuntu_22_04_release_gcc_11:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          compiler_version: 11
          uses_clang_compiler: OFF
          export_artefacts: true
        ubuntu_22_04_debug_clang:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          compiler_version: 14
          uses_clang_compiler: ON
          export_artefacts: false
        ubuntu_22_04_release_clang:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          compiler_version: 14
          uses_clang_compiler: ON
          export_artefacts: false
        ubuntu_20_04_debug_gcc_10:
          imageName: 'ubuntu-20.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          compiler_version: 10
          uses_clang_compiler: OFF
          export_artefacts: false
        ubuntu_20_04_release_gcc_10:
          imageName: 'ubuntu-20.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          compiler_version: 10
          uses_clang_compiler: OFF
          export_artefacts: false
        ubuntu_18_04_debug_gcc_10:
          imageName: 'ubuntu-18.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          compiler_version: 10
          uses_clang_compiler: OFF
          export_artefacts: false
        ubuntu_18_04_release_gcc_10:
          imageName: 'ubuntu-18.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          compiler_version: 10
          uses_clang_compiler: OFF
          export_artefacts: false
        mac_10_15_debug_xcode_12_4:
          imageName: 'macOS-10.15'
          generator: Xcode
          build_configuration: 'Debug'
          xcode_version: 12.4
          uses_clang_compiler: OFF
          osx_architecture: 'x86_64'
          export_artefacts: false
        mac_10_15_release_xcode_12_4:
          imageName: 'macOS-10.15'
          generator: Xcode
          build_configuration: 'Release'
          xcode_version: 12.4
          uses_clang_compiler: OFF
          osx_architecture: 'x86_64'
          export_artefacts: true
        mac_11_debug_xcode_13_2_1:
          imageName: 'macOS-11'
          generator: Xcode
          build_configuration: 'Debug'
          xcode_version: 13.2.1
          uses_clang_compiler: OFF
          osx_architecture: 'x86_64'
          export_artefacts: false
        mac_11_release_xcode_13_2_1:
          imageName: 'macOS-11'
          generator: Xcode
          build_configuration: 'Release'
          xcode_version: 13.2.1
          uses_clang_compiler: OFF
          osx_architecture: 'x86_64'
          export_artefacts: true
        mac_12_debug_xcode_13_4:
          imageName: 'macOS-12'
          generator: Xcode
          build_configuration: 'Debug'
          xcode_version: 13.4
          uses_clang_compiler: OFF
          osx_architecture: 'x86_64'
          export_artefacts: false
        mac_12_release_xcode_13_4:
          imageName: 'macOS-12'
          generator: Xcode
          build_configuration: 'Release'
          xcode_version: 13.4
          uses_clang_compiler: OFF
          osx_architecture: 'x86_64'
          export_artefacts: true
        mac_12_arm64_debug_xcode_13_4:
          imageName: 'macOS-12'
          generator: Xcode
          build_configuration: 'Debug'
          xcode_version: 13.4
          uses_clang_compiler: OFF
          osx_architecture: 'arm64'
          export_artefacts: false
        mac_12_arm64_release_xcode_13_4:
          imageName: 'macOS-12'
          generator: Xcode
          build_configuration: 'Release'
          xcode_version: 13.4
          uses_clang_compiler: OFF
          osx_architecture: 'arm64'
          export_artefacts: true
        windows_2019_debug:
          imageName: 'windows-2019'
          generator: Visual Studio 16 2019
          build_configuration: 'Debug'
          uses_clang_compiler: OFF
          export_artefacts: false
        windows_2019_release:
          imageName: 'windows-2019'
          generator: Visual Studio 16 2019
          build_configuration: 'Release'
          uses_clang_compiler: OFF
          export_artefacts: false
        windows_2022_debug:
          imageName: 'windows-2022'
          generator: Visual Studio 17 2022
          build_configuration: 'Debug'
          uses_clang_compiler: OFF
          export_artefacts: false
        windows_2022_release:
          imageName: 'windows-2022'
          generator: Visual Studio 17 2022
          build_configuration: 'Release'
          uses_clang_compiler: OFF
          export_artefacts: true
    pool:
        vmImage: $(imageName)
    steps:
    - script: |
        if [ "$(uses_clang_compiler)" = "OFF" ] ; then
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$(compiler_version) 1
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$(compiler_version) 1
        fi
        gcc --version
      displayName: 'Setup the correct version of gcc'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        if [ "$(uses_clang_compiler)" = "ON" ] ; then
          sudo apt-get install clang
        fi
        clang --version
      displayName: 'Install the latest version of clang'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        sudo xcode-select -s /Applications/Xcode_$(xcode_version).app
      displayName: 'Setup the correct version of Xcode'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
    - script: |
        pip3 install --upgrade pip
        pip3 install setuptools
        pip3 install -r requirements.txt
      displayName: 'Installs dependencies'
    - script: |
        cd XYModem
        mkdir -p build
        cd build
        cmake .. -G "$(generator)" -DCMAKE_BUILD_TYPE=$(build_configuration) -DBUILD_ALL=ON -DCMAKE_OSX_ARCHITECTURES=$(osx_architecture) -DUSES_CLANG_COMPILER=$(uses_clang_compiler)
      displayName: 'Generates the Solution of the Project'
    - script: |
        cd XYModem/build
        cmake --build . --config $(build_configuration)
      displayName: 'Compiles the solution in $(build_configuration) Configuration'
    - script: |
        cd XYModem/build
        ctest -C $(build_configuration) -T Test --output-on-failure
      displayName: 'Runs the tests in $(build_configuration) configuration'
    - script: |
        if [ "$(imageName)" = "ubuntu-22.04" ] && [ "$(build_configuration)" = "Debug" ] && [ $(compiler_version) -eq 11 ] ; then
          echo "Runs the code coverage"
          cd XYModem/build
          gcovr -r .. -f \.\./src --xml coverage.xml
        else
          echo "Ignores the test coverage on purpose"
        fi
      displayName: Runs the code coverage of the solution for $(build_configuration) configuration on Unix
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        if [ "$(imageName)" = "ubuntu-22.04" ] && [ "$(build_configuration)" = "Debug" ] && [ $(compiler_version) -eq 11 ] ; then
          echo "Sends Report to codecov on Linux"
          cd XYModem/build
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -f coverage.xml -cF $(configuration)_$(generator)
        else
          echo "Ignores the test coverage on purpose"
        fi
      displayName: Sends Report to codecov on Linux
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - task: CopyFiles@2
      displayName: 'Copying artefacts to staging area'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **/build/examples/Release/*
          **/build/src/Backends/Release/*
          **/build/src/XYModem/Release/*
          **/build/XYModem/Release/*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/executables'
        flattenFolders: true
      condition : and(succeeded(), eq(variables['build_configuration'], 'Release'), variables['export_artefacts'])
    - task: ArchiveFiles@2
      displayName: "Compress artefacts to unique file"
      inputs:
        rootFolderOrFile: $(Build.ArtifactStagingDirectory)/executables
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/archive/$(Agent.JobName)_$(Build.SourceBranchName).zip
      condition : and(succeeded(), eq(variables['build_configuration'], 'Release'), variables['export_artefacts'])
    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifacts'
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/archive
      condition : and(succeeded(), eq(variables['build_configuration'] , 'Release'), variables['export_artefacts'])
  - job: Static_Analysis
    strategy:
      matrix:
        debug:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
          gcc_version: 11
        release:
          imageName: 'ubuntu-22.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
          gcc_version: 11
    pool:
        vmImage: $(imageName)
    steps:
    - script: |
        ls /usr/bin/gcc*
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$(gcc_version) 1
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$(gcc_version) 1
      displayName: 'Setup the correct version of gcc'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        sudo apt-get install clang-tidy cppcheck iwyu
        clang-tidy --version
        cppcheck --version
        iwyu --version
      displayName: 'Installs the latest version of clang-tidy'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        choco install opencppcoverage
      displayName: Install dependencies (Windows)
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT'))
    - script: |
        pip3 install setuptools
        pip3 install -r requirements.txt
      displayName: 'Installs dependencies'
    - script: |
        cd XYModem
        mkdir -p build
        cd build
        cmake .. -G "$(generator)" -DCMAKE_BUILD_TYPE=$(build_configuration) -DWITH_STATIC_ANALYSIS=ON -DBUILD_ALL=ON
      displayName: 'Generates the Solution of the Project with the static analysis tools set up'
    - script: |
        cd XYModem/build
        cmake --build . --config $(build_configuration)
      displayName: 'Compiles the solution in $(build_configuration) configuration while running the static analysis tools'
  - job: Code_formatting
    pool:
        vmImage: ubuntu-22.04
    steps:
    - script: |
        pip3 install setuptools
        pip3 install -r requirements.txt
      displayName: 'Installs dependencies'
    - script: |
        sh format.sh
      displayName: 'Format source and header files of the repository'
    - script: |
        git diff --exit-code
      displayName: 'Checks if the cpp files were already formatted'
  - job: Github_Release
    dependsOn:
        - XYModem
        - Code_formatting
        - Static_Analysis
    steps:
    - task: GitHubRelease@0
      displayName: 'Create GitHub Release'
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      inputs:
         gitHubConnection: github.com_Riuzakiii
         repositoryName: Riuzakiii/XYModem
         action: edit
         tagSource: auto
         tag: $(Build.BuildNumber)      
         assets: |
              $(Build.ArtifactStagingDirectory)
         isDraft: true
         addChangeLog: true